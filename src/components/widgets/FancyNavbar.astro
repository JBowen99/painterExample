---
import { Image } from 'astro:assets';
import logoIcon from 'src/assets/logo.svg';

export interface Props {
  companyName?: string;
  logo?: string;
  isSticky?: boolean;
  layout?: 'left' | 'center' | 'right';
  links: { href: string; text: string }[];
}

const { companyName, logo, isSticky = false, layout = 'left', links = [] } = Astro.props;

const layoutClasses = {
  left: 'justify-start',
  center: 'justify-center',
  right: 'justify-end',
};

const stickyClass = isSticky ? 'sticky top-0' : '';
---

<nav class={`bg-slate-200 shadow-md ${stickyClass} z-50`}>
  <div class={`container mx-auto px-4 sm:px-6 lg:px-8`}>
    <div class={`flex items-center justify-between h-16 ${layoutClasses[layout]}`}>
      <div class="flex items-center">
        {logo && <Image src={logoIcon} alt="Company Logo" class="h-8 w-auto mr-3" />}
        {companyName && <span class="text-xl font-semibold text-gray-800 font-cinzel">{companyName}</span>}
      </div>
      <div class="hidden md:block">
        <div class="ml-10 flex items-baseline space-x-4">
          {
            links.map((link) => (
              <a href={link.href} class="text-gray-600 hover:text-gray-900 px-3 py-2 rounded-md text-sm font-medium">
                {link.text}
              </a>
            ))
          }
        </div>
      </div>
      <div class="md:hidden">
        <!-- Static Hamburger Menu Button
        <button type="button" class="text-gray-600 hover:text-gray-900" id="mobile-menu-button">
          <svg class="h-6 w-6" xmlns="http://www.w3.org/2000/svg" fill="none" viewBox="0 0 24 24" stroke="currentColor">
            <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M4 6h16M4 12h16M4 18h16" />
          </svg>
        </button> -->
        <!-- Dynamic Hamburger Menu Button -->
        <button
          type="button"
          class="text-gray-600 hover:text-gray-900"
          id="mobile-menu-button"
          aria-label="Toggle menu"
        >
          <div class="w-4 h-4 mr-2 mb-2 flex flex-col justify-between">
            <span class="bg-current transform transition-all duration-300 ease-in-out h-0.5 w-6 rounded-sm"></span>
            <span class="bg-current transform transition-all duration-300 ease-in-out h-0.5 w-6 rounded-sm"></span>
            <span class="bg-current transform transition-all duration-300 ease-in-out h-0.5 w-6 rounded-sm"></span>
          </div>
        </button>
      </div>
    </div>
  </div>

  <!-- Mobile menu, show/hide based on menu state -->
  <div class="md:hidden hidden" id="mobile-menu">
    <div class="px-2 pt-2 pb-3 space-y-1 sm:px-3">
      {
        links.map((link) => (
          <a
            href={link.href}
            class="text-gray-600 hover:text-gray-900 block px-3 py-2 rounded-md text-base font-medium"
          >
            {link.text}
          </a>
        ))
      }
    </div>
  </div>

  <!-- Mobile menu overlay -->
  <div
    class="md:hidden fixed inset-0 bg-gray-950 bg-opacity-90 z-50 transition-opacity duration-300 opacity-0 pointer-events-none"
    id="mobile-menu-overlay"
  >
    <div class="flex items-center justify-center h-full">
      <div class="text-center">
        {
          links.map((link) => (
            <a href={link.href} class="block text-white hover:text-gray-200 px-3 py-2 rounded-md text-lg font-medium">
              {link.text}
            </a>
          ))
        }
      </div>
    </div>
  </div>
</nav>

<style>
  #mobile-menu-button {
    position: relative;
    z-index: 60;
  }
  #mobile-menu-button.active span:nth-child(1) {
    transform: translateY(7px) rotate(45deg);
    color: white;
  }
  #mobile-menu-button.active span:nth-child(2) {
    opacity: 0;
  }
  #mobile-menu-button.active span:nth-child(3) {
    transform: translateY(-7px) rotate(-45deg);
    color: white;
  }
</style>

<!-- Static Menu
<script>
  const mobileMenuButton = document.getElementById('mobile-menu-button');
  const mobileMenu = document.getElementById('mobile-menu');

  mobileMenuButton?.addEventListener('click', () => {
    mobileMenu?.classList.toggle('hidden');
  });
</script>
-->

<script>
  const mobileMenuButton = document.getElementById('mobile-menu-button');
  const mobileMenuOverlay = document.getElementById('mobile-menu-overlay');

  mobileMenuButton?.addEventListener('click', () => {
    mobileMenuButton.classList.toggle('active');
    if (mobileMenuOverlay) {
      mobileMenuOverlay.classList.toggle('opacity-0');
      mobileMenuOverlay.classList.toggle('pointer-events-none');
    }
  });
</script>
